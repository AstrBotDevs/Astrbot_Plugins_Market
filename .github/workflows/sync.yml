name: Update Plugin Cache
on:
  schedule:
    # 每小时执行一次 (UTC时间)
    - cron: '0 * * * *'  # 修复了cron表达式
  workflow_dispatch: # 允许手动触发

# 添加权限声明
permissions:
  contents: write
  actions: read

jobs:
  update-cache:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.PAT_TOKEN }}
        fetch-depth: 0
        persist-credentials: true
    
    - name: Fetch plugin data
      id: fetch-data
      run: |
        echo "开始获取插件数据..."
        
        # 设置超时和重试
        response=$(curl -s --max-time 30 --retry 3 --retry-delay 5 \
          -H "User-Agent: GitHub-Action-Plugin-Cache" \
          "https://api.soulter.top/astrbot/plugins")
        
        # 检查响应是否为空
        if [ -z "$response" ]; then
          echo "获取到的响应为空，跳过更新"
          echo "should_update=false" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # 检查是否为有效的JSON
        if ! echo "$response" | jq . > /dev/null 2>&1; then
          echo "响应不是有效的JSON格式，跳过更新"
          echo "should_update=false" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # 检查JSON是否为空对象或空数组
        if [ "$response" = "{}" ] || [ "$response" = "[]" ] || [ "$response" = "null" ]; then
          echo "获取到空的JSON数据，跳过更新"
          echo "should_update=false" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # 保存响应到临时文件
        echo "$response" > temp_plugin_cache.json
        echo "should_update=true" >> $GITHUB_OUTPUT
        echo "成功获取插件数据"
    
    - name: Update plugin cache
      if: steps.fetch-data.outputs.should_update == 'true'
      run: |
        echo "=== 调试信息：更新前 ==="
        echo "临时文件大小: $(wc -c < temp_plugin_cache.json) bytes"
        echo "临时文件前100字符: $(head -c 100 temp_plugin_cache.json)"
        
        if [ -f plugin_cache.json ]; then
          echo "原文件大小: $(wc -c < plugin_cache.json) bytes"
          echo "原文件前100字符: $(head -c 100 plugin_cache.json)"
        else
          echo "原文件不存在"
        fi
        
        # 移动临时文件到目标位置
        mv temp_plugin_cache.json plugin_cache.json
        
        # 格式化JSON（可选，使其更易读）
        if command -v jq &> /dev/null; then
          jq . plugin_cache.json > temp.json && mv temp.json plugin_cache.json
        fi
        
        echo "=== 调试信息：更新后 ==="
        echo "新文件大小: $(wc -c < plugin_cache.json) bytes"
        echo "新文件前100字符: $(head -c 100 plugin_cache.json)"
        echo "插件缓存文件已更新"
    
    - name: Check for changes
      if: steps.fetch-data.outputs.should_update == 'true'
      id: git-check
      run: |
        echo "=== 检查文件变化 ==="
        
        # 显示工作目录状态
        echo "当前工作目录: $(pwd)"
        echo "文件列表:"
        ls -la plugin_cache.json 2>/dev/null || echo "plugin_cache.json 文件不存在"
        
        # 显示Git状态
        echo "Git状态:"
        git status --porcelain
        git status
        
        # 检查文件是否已存在于仓库中
        if git ls-files --error-unmatch plugin_cache.json >/dev/null 2>&1; then
          echo "plugin_cache.json 已被Git跟踪（已存在于仓库）"
          # 对于已跟踪的文件，检查是否有修改
          if git diff --exit-code plugin_cache.json; then
            echo "已跟踪文件无变化"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "已跟踪文件有变化"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi
        else
          echo "plugin_cache.json 未被Git跟踪（新文件）"
          if [ -f plugin_cache.json ]; then
            echo "文件存在但未跟踪，这是一个新文件，需要提交！"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "文件不存在"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi
        fi
        
        # 额外保险：检查 git status 中是否有未跟踪或修改的文件
        if git status --porcelain | grep -E "^\?\?.*plugin_cache\.json|^.M.*plugin_cache\.json|^M.*plugin_cache\.json"; then
          echo "git status 显示 plugin_cache.json 有变化（新文件或修改）"
          echo "has_changes=true" >> $GITHUB_OUTPUT
        fi
        
        echo "最终决定 has_changes: $(git status --porcelain | grep plugin_cache || echo 'no changes')"
    
    - name: Commit and push changes
      if: steps.fetch-data.outputs.should_update == 'true' && steps.git-check.outputs.has_changes == 'true'
      run: |
        echo "准备提交变更..."
        
        # 配置Git用户信息
        git config --local user.email "igcrystalcache@gmail.com"
        git config --local user.name "IGCrystal-Ghost"
        
        # 强制添加文件（确保被跟踪）
        git add -f plugin_cache.json
        
        # 检查是否真的有内容要提交
        if git diff --cached --quiet; then
          echo "警告：没有暂存的更改，但条件判断说有变化"
          git status
          git diff plugin_cache.json
          exit 1
        fi
        
        # 提交更改
        git commit -m "🔄 Update plugin cache - $(date -u '+%Y-%m-%d %H:%M:%S UTC')" || {
          echo "提交失败，显示详细信息："
          git status
          git diff --cached
          exit 1
        }
        
        # 推送到远程仓库
        echo "推送到远程仓库..."
        git push origin HEAD:${{ github.ref_name }} || {
          echo "推送失败"
          exit 1
        }
        
        echo "✅ 已成功提交并推送更新"
    
    - name: Clean up
      if: always()
      run: |
        # 清理临时文件
        rm -f temp_plugin_cache.json temp.json
    
    - name: Summary
      if: always()
      run: |
        echo "=== 执行总结 ==="
        echo "should_update: ${{ steps.fetch-data.outputs.should_update }}"
        echo "has_changes: ${{ steps.git-check.outputs.has_changes }}"
        
        if [ "${{ steps.fetch-data.outputs.should_update }}" = "true" ]; then
          if [ "${{ steps.git-check.outputs.has_changes }}" = "true" ]; then
            echo "✅ 插件缓存已成功更新并提交"
          else
            echo "ℹ️ 数据获取成功，但内容未发生变化，无需提交"
          fi
        else
          echo "⚠️ 由于网络问题或数据为空，跳过了缓存更新"
        fi
